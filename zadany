ЗАДАНИЕ 2 

1. Управление списками покупок
  Создание нового списка покупок
  Добавление товаров в список
  Редактирование списка (удаление, изменение товаров)
  Отметка купленных товаров

2. Авторизация и регистрация
  Вход в приложение через логин и пароль
  Регистрация нового пользователя

3. История покупок
  Просмотр завершённых списков
  Возможность восстановления ранее использованных списков

4. Дополнительные функции
  Добавление заметок к товарам
  Упорядочивание товаров по категориям
  Оповещения о незавершённом списке



ЗАДАНИЕ 3

1. (1) Управление списками покупок
Создание списка
Метод: POST /lists
Описание: Создаёт новый список покупок.
Запрос:
{
  "name": "Продукты на неделю"
}
Ответ:
{
  "id": 123,
  "name": "Продукты на неделю",
}

(2) Получение всех списков пользователя
Метод: GET /lists
Описание: Возвращает список всех списков покупок пользователя.
Ответ:
[
  {
    "id": 123,
    "name": "Продукты на неделю"
  },
  {
    "id": 124,
    "name": "Вечеринка"
  }
]

(3) Удаление списка
Метод: DELETE /lists/{id}
Описание: Удаляет список покупок.
Ответ:
{
  "message": "Список удалён"
}



2. (1) Работа с товарами в списке
Добавление товара
Метод: POST /lists/{id}/items
Описание: Добавляет товар в список.
Запрос:
{
  "name": "Молоко",
  "quantity": 2,
  "unit": "л"
}
Ответ:
{
  "id": 1,
  "name": "Молоко",
  "quantity": 2,
  "unit": "л"
}

(2) Редактирование товара
Метод: PUT /lists/{list_id}/items/{item_id}
Описание: Изменяет количество или название товара.
Запрос:
{
  "quantity": 3
}
Ответ:

{
  "id": 1,
  "name": "Молоко",
  "quantity": 3,
  "unit": "л"
}

(3) Удаление товара
Метод: DELETE /lists/{list_id}/items/{item_id}
Описание: Удаляет товар из списка.
Ответ:
{
  "message": "Товар удалён"
}



3. Покупка товаров
(1) Отметка товара как купленного
Метод: PATCH /lists/{list_id}/items/{item_id}
Описание: Обновляет статус товара.
Запрос:
{
  "purchased": true
}
Ответ:
{
  "id": 1,
  "name": "Молоко",
  "quantity": 3,
  "unit": "л",
  "purchased": true
}

(2) Снятие отметки о покупке
Метод: PATCH /lists/{list_id}/items/{item_id}
Описание: Ставит товар обратно в “не купленные”.
Запрос:
{
  "purchased": false
}
Ответ:
{
  "id": 1,
  "name": "Молоко",
  "quantity": 3,
  "unit": "л",
  "purchased": false
}

4. Синхронизация данных
(1) Получение всех данных для синхронизации
Метод: GET /sync
Описание: Получает актуальные данные пользователя (списки и товары).
Ответ:
{
  "lists": [
    {
      "id": 123,
      "name": "Продукты",
      "items": [
        {
          "id": 1,
          "name": "Молоко",
          "quantity": 2,
          "unit": "л",
          "purchased": false
        }
      ]
    }
  ],
}

(2) Отправка изменений с клиента на сервер
Метод: POST /sync
Описание: Отправляет локальные изменения на сервер.
Запрос:
{
  "changes": [
    {
      "type": "update",
      "entity": "item",
      "id": 1,
      "data": {
        "purchased": true
      }
    }
  ]
}
Ответ:
{
  "message": "Синхронизация успешна"
}



ЗАДАНИЕ 4 
ССЫЛКА НА FIGMA - https://www.figma.com/design/xn9s2z8xM3B3r5Ta3ragLL/Untitled?node-id=0-1&p=f&t=PFzclMFjd8eicgmD-0
Описание пользовательского интерфейса:
 1. Шапка экрана
  Верхняя часть экрана содержит логотип “МОЛОЧНЫЕ ПРОДУКТЫ”.
  Справа расположена иконка корзины для быстрого доступа к покупкам.
  Слева — иконка меню (три полоски) для навигации по разделам приложения.
 2. Основная часть – каталог товаров
  Представлены молочные продукты продукты.
  Каждый товар имеет изображение, цену, название и две кнопки:
  “BUY” — кнопка покупки товара.
  Иконка корзины — добавляет товар в корзину.
 3. Структура экрана
  Фон белый, шрифты синего цвета, что делает текст контрастным и легко читаемым.
  Кнопки “BUY” зеленого цвета, что привлекает внимание к действию.



ЗАДАНИЕ 5 
Функция покупки товара в мобильном приложении позволяет пользователю выбрать товары, добавить их в корзину, оформить заказ и оплатить его.
 Основной сценарий процесса покупки
 1. Выбор товара
  Пользователь открывает каталог товаров.
  Выбирает нужный товар, нажимает “Добавить в корзину”.
  Система добавляет товар в корзину, обновляя список товаров и общую стоимость.
 2. Оформление заказа
  Пользователь переходит в корзину.
  Проверяет список товаров, их количество и сумму.
  Выбирает способ оплаты (карта, электронный кошелек и т. д.).
  Вводит адрес доставки (если требуется).
  Подтверждает заказ.
 3. Оплата
  Система отправляет запрос в платежный сервис.
  Если оплата успешна, создается запись о заказе.
  Если оплата не проходит, пользователю предлагается повторить попытку.
 4. Обновление данных
  После успешной оплаты заказу присваивается статус “Оплачен”.
  Данные о покупке сохраняются в базе данных.
  Пользователь получает уведомление с подтверждением.



API Методы
1. API метод: Обновление статуса покупки
  Метод: POST /api/purchase/update
  Описание: Этот метод обновляет статус товара в списке покупок пользователя (например, отмечает товар как купленный).

Параметры:
  user_id (string): Идентификатор пользователя.
  item_id (string): Идентификатор товара.
  quantity (integer): Количество купленных единиц.
  status (string): Статус товара, например, “куплен” или “не куплен”.

2. API метод: Получение обновленного списка покупок
  Метод: GET /api/purchase/list
  Описание: Этот метод возвращает список всех товаров с их текущим статусом для указанного пользователя.

Параметры:
  user_id (string): Идентификатор пользователя.

3. API метод: Отметить товар как не купленный
  Метод: POST /api/purchase/reset
  Описание: Этот метод позволяет сбросить статус товара (например, вернуть его в статус “не куплен”).

Параметры:
  user_id (string): Идентификатор пользователя.
  item_id (string): Идентификатор товара.



ЗАДАНИЕ 6 
Основные сложности разработки:
 1. Синхронизация данных между устройствами и онлайн/оффлайн режимом.
 2. Обработка ошибок и исключений, например, при потере соединения.
 3. Безопасность данных при передаче и хранении.

Вопросы заказчику:
 1. Планируется ли интеграция с магазинами?
 2. Какие требования к безопасности данных?
 3. Нужен ли офлайн-режим?



ЗАДАНИЕ 7 
1. Общая стоимость книг для каждого автора:
  
   SELECT 
       Authors.AuthorName, 
       SUM(Books.Price) AS TotalPrice
   FROM 
       Books
   JOIN 
       Authors ON Books.AuthorId = Authors.Id
   GROUP BY 
       Authors.AuthorName
   ORDER BY 
       TotalPrice DESC;

2. Стоимость книг автора превышает 1500:
  
   SELECT 
       Authors.AuthorName, 
       SUM(Books.Price) AS TotalPrice
   FROM 
       Books
   JOIN 
       Authors ON Books.AuthorId = Authors.Id
   GROUP BY 
       Authors.AuthorName
   HAVING 
       SUM(Books.Price) > 1500;

3. Авторы с количеством книг:
  
   SELECT 
       Authors.AuthorName, 
       COUNT(Books.Id) AS BookCount
   FROM 
       Authors
   LEFT JOIN 
       Books ON Authors.Id = Books.AuthorId
   GROUP BY 
       Authors.AuthorName;

4. Автор без книг:
  
   SELECT 
       Authors.AuthorName
   FROM 
       Authors
   LEFT JOIN 
       Books ON Authors.Id = Books.AuthorId
   WHERE 
       Books.Id IS NULL;
